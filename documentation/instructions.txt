--------------------------------------------
        What we have provided:
--------------------------------------------
- CSV file with user data,
- A sequence diagram for the system
- This instructions file.
--------------------------------------------
        What we need you to do:
--------------------------------------------
1. Build a DataService:
- upon start, it should load provided CSV to memory,
- it should not be accessible from the browser,
- it should subscribe to a UserRequests topic on a pubsub like rabbitmq or redis,
- it should listen to GetUser messages on the pubsub and respond on UserResponses topic with UserData message(containing data of a given user) or UserNotFound message (if the user is not found)
2. Build an API/REST service:
- it should be accessible from the browser,
- it should not store any data,
- it should implement a GET endpoint: /getUser/$id, which should return a JSON with user details or 404 if user doesn't exist,
- upon receiving the request - it should send a GetUser message on the UserRequests topic, wait for DataService to respond via the UserResponses topic, and then the API should respond to the user with a JSON containing user data or 404
--------------------------------------------
         Technical Requirements:
--------------------------------------------
- You can utilise any language and libraries you'd like
- Provide basic standard output logging for both services: service startup, getting/responding to requests, errors etc.
- Services should be able to handle multiple requests per second (users shouldn't need to wait for previous requests to finish)
- The system should have a simple, straight-forward installation procedure (ideally docker-compose),
--------------------------------------------
         Bonus credit for:
--------------------------------------------
- Unit testing at least some parts of the code
--------------------------------------------
         Example requests:
--------------------------------------------
http://localhost:3000/getUser/7 --> { first_name: "Lothaire", last_name: "Spaxman", email: "lspaxman6@marriott.com", gender: "Male", ip_address: "159.167.87.195" }
http://localhost:3000/getUser --> 404
http://localhost:3000/getUser/1002 --> 404
